def reward_function(params):
    '''
    Example of penalize steering, which helps mitigate zig-zag behaviors
    '''
   
    # Read input parameters
    x_car = params['x']
    y_car = params['y']
    all_wheels_on_track = params['all_wheels_on_track']
    distance_from_center = params['distance_from_center']
    track_width = params['track_width']
    progress = params['progress']
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    steering = abs(params['steering_angle']) # Only need the absolute steering angle
    speed = params['speed']
    
    if all_wheels_on_track:
        reward = 10
    else:
        reward = .1 #default reward value
        
    # Determine distance from nearest waypoint
    prev_pt = waypoints[closest_waypoints[0]] # closest waypoint behind car
    next_pt = waypoints[closest_waypoints[1]] # closest waypoint ahead of car
    nextnext_pt = waypoints[(closest_waypoints[1] + 1) % len(waypoints)] # waypoint after next_pt
    
    # Find out whether track is straight or curved
    car_next_dist = pow(pow(x_car - next_pt[0],2) + pow(y_car - next_pt[1],2),0.5)    
    prev_next_dist = pow(pow(prev_pt[0] - next_pt[0],2) + pow(prev_pt[1] - next_pt[1],2),0.5)    
    next_nextnext_dist = pow(pow((next_pt[0] - nextnext_pt[0],2) + pow(next_pt[1] - nextnext_pt[1],2),0.5)   
    car_nextnext_dist = pow(pow(x_car - nextnext_pt[0],2) + pow(y_car - nextnext_pt[1],2),0.5)
    prev_nextnext_dist = pow(pow(prev_pt[0] - nextnext_pt[0],2) + pow(prev_pt[1] - nextnext_pt[1],2),0.5)
    
    # Calculate 3 marks that are farther and father away from the center line
    marker_1 = 0.1 * track_width
    marker_2 = 0.25 * track_width
    marker_3 = 0.5 * track_width
    
    # Steering penality threshold, change the number based on your action space setting
    ABS_STEERING_THRESHOLD = 15
    
    if (prev_nextnext_dist/(prev_next_dist + next_nextnext_dist)) < .9:
        #linear track

        # Penalize reward if the car is steering too much
        if steering > ABS_STEERING_THRESHOLD:
            reward *= 0.8  

        # Give higher reward if the car is closer to center line and vice versa
        if distance_from_center <= marker_1:
            reward += 10
        elif distance_from_center <= marker_2:
            reward += 1
        elif distance_from_center <= marker_3:
            reward += 0.1
        else:
            reward += 1e-3  # likely crashed/ close to off track  
            
    else:
        #curved track
        
        # Penalize reward if the car is steering too much
        if steering > ABS_STEERING_THRESHOLD:
            reward *= 0.95  
            
        # Give higher reward if the car is closer to center line and vice versa
        if distance_from_center <= marker_2:
            reward += 10
        elif distance_from_center <= marker_3:
            reward += 1
        else:
            reward += 1e-3   

    return reward
