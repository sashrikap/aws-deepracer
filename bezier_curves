# x_function = ((a-2c+e)**2)*(t**2) + (2c-2a)*t + a
# y_function = ((b-2d+f)**2)*(t**2) + (2d-2b)*t + b

def xprime(w1, w2, w3, time):
    a_coeff = w1[0]
    c_coeff = w2[0]
    e_coeff = w3[0]
    return 2*(a_coeff - 2*c_coeff + e_coeff)*time + (2*c_coeff - 2*a_coeff)

def yprime(w1, w2, w3, time):
    b_coeff = w1[1]
    d_coeff = w2[1]
    f_coeff = w3[1]
    return 2*(b_coeff - 2*d_coeff + f_coeff)*time + (2*d_coeff - 2*b_coeff)

def xdblprime(w1, w2, w3, time):
    a_coeff = w1[0]
    c_coeff = w2[0]
    e_coeff = w3[0]
    return 2*(a_coeff - 2*c_coeff + e_coeff)

def ydblprime(w1, w2, w3, time):
    b_coeff = w1[1]
    d_coeff = w2[1]
    f_coeff = w3[1]
    return 2*(b_coeff - 2*d_coeff + f_coeff)

def getTimeForVertex(w1, w2, w3):
    # [bool: if function works, value of t, whether value is in domain [0,1]]
    b_coeff = w1[1]
    d_coeff = w2[1]
    f_coeff = w3[1]
    
    if b_coeff - 2*d_coeff + f_coeff == 0:
        return [False,0, False]
    else:
        time = (b_coeff - d_coeff)/(b_coeff - 2*d_coeff + f_coeff)
        if (0 <= time) and (time <= 1):
            return [True, time, True]
        else:
            return [True, time, False]

def getCurvature(w1,w2,w3,time):
    #numerator = abs(xprime(w1,w2,w3,time)*ydblprime(w1,w2,w3,time) - xdblprime(w1,w2,w3,time)*yprime(w1,w2,w3,time))
    numerator = (xprime(w1,w2,w3,time)*ydblprime(w1,w2,w3,time) - xdblprime(w1,w2,w3,time)*yprime(w1,w2,w3,time))
    denominator = ((xprime(w1,w2,w3,time))**2 + (yprime(w1,w2,w3,time))**2)**1.5
    
    if denominator == 0:
        print(numerator,denominator, w1)
        return [False, 0]
    else:
        return [True, numerator/denominator]
    
def getTime(waypoints):
    counter = 0
    while (counter < len(waypoints) + 2):
        curr_waypoints = waypoints[0:4]
        curvature_list.append(getCurvature(curr_waypoints[0], curr_waypoints[1], curr_waypoints[2]))
        counter += 2
        
def findListCurvature(waypoints):
    counter = 0
    curvature_list = []
    
    while (counter < len(waypoints) - 2):
        curr_waypoints = waypoints[counter: counter + 3]
        time_list = getTimeForVertex(curr_waypoints[0], curr_waypoints[1], curr_waypoints[2])
        if (time_list[0]):
            curvature_list.append(getCurvature(curr_waypoints[0], curr_waypoints[1], curr_waypoints[2], time_list[1]))
        else:
            curvature_list.append(False)
        counter += 2
    
    return curvature_list
